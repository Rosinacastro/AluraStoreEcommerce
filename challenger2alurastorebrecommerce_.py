# -*- coding: utf-8 -*-
"""Challenger2AluraStoreBrEcommerce .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13DdMnGr353KPX5Q47LvH2U0MWij2jJDC

### Importa√ß√£o dos dados
"""

import pandas as pd

url = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science/refs/heads/main/base-de-dados-challenge-1/loja_1.csv"
url2 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science/refs/heads/main/base-de-dados-challenge-1/loja_2.csv"
url3 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science/refs/heads/main/base-de-dados-challenge-1/loja_3.csv"
url4 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science/refs/heads/main/base-de-dados-challenge-1/loja_4.csv"

loja = pd.read_csv(url)
loja2 = pd.read_csv(url2)
loja3 = pd.read_csv(url3)
loja4 = pd.read_csv(url4)

loja.head()

loja['Loja'] = 'Loja 1'
loja2['Loja'] = 'Loja 2'
loja3['Loja'] = 'Loja 3'
loja4['Loja'] = 'Loja 4'

lojas_combinadas = pd.concat([loja, loja2, loja3, loja4], ignore_index=True)

lojas_combinadas.info()

lojas_combinadas.head()

total_vendas_loja_1 = sum(loja['Pre√ßo'])
total_vendas_loja_1

total_vendas_loja_2 = sum(loja2['Pre√ßo'])
total_vendas_loja_2

total_vendas_loja_3 = sum(loja3['Pre√ßo'])
total_vendas_loja_3

total_vendas_loja_4 = sum(loja4['Pre√ßo'])
total_vendas_loja_4

lojas_combinadas['Loja'].value_counts()

"""#1. An√°lise do faturamento

"""

faturamento_por_loja = lojas_combinadas.groupby('Loja')['Pre√ßo'].sum()

faturamento_com_frete = lojas_combinadas.groupby('Loja').apply(
    lambda df: (df['Pre√ßo'] + df['Frete']).sum()
)

faturamento_com_frete.sort_values(ascending=False)

pd.options.display.float_format = '{:,.2f}'.format

faturamento_com_frete.sort_values(ascending=False)

df_faturamento = faturamento_com_frete.reset_index(name='Faturamento Total')

import matplotlib.pyplot as plt

df_faturamento = lojas_combinadas.groupby('Loja').apply(
    lambda df: (df['Pre√ßo'] + df['Frete']).sum()
).reset_index(name='Faturamento Total')


plt.figure(figsize=(10, 6))


plt.bar(df_faturamento['Loja'], df_faturamento['Faturamento Total'], color='mediumseagreen')


plt.title('Faturamento Total por Loja', fontsize=16)
plt.xlabel('Loja', fontsize=12)
plt.ylabel('Faturamento Total (R$)', fontsize=12)


for index, row in df_faturamento.iterrows():
    plt.text(index, row['Faturamento Total'] + 50,
             f"R$ {row['Faturamento Total']:.2f}",
             ha='center', fontsize=10)

plt.tight_layout()
plt.show()

"""# 2. Vendas por Categoria

"""

vendas_categoria = lojas_combinadas.groupby('Categoria do Produto').apply(
    lambda df: (df['Pre√ßo'] + df['Frete']).sum()
).reset_index(name='Faturamento Total')

vendas_categoria.sort_values(by='Faturamento Total', ascending=False)

plt.figure(figsize=(12, 6))


plt.bar(vendas_categoria['Categoria do Produto'], vendas_categoria['Faturamento Total'], color='indianred')


plt.title('Faturamento por Categoria de Produto', fontsize=16)
plt.xlabel('Categoria', fontsize=12)
plt.ylabel('Faturamento Total (R$)', fontsize=12)


for index, row in vendas_categoria.iterrows():
    plt.text(index, row['Faturamento Total'] + 50,
             f"R$ {row['Faturamento Total']:.2f}",
             ha='center', fontsize=10)


plt.xticks(rotation=45)


plt.tight_layout()
plt.show()

"""# 3. M√©dia de Avalia√ß√£o das Lojas"""

media_avaliacao_lojas = lojas_combinadas.groupby('Loja')['Avalia√ß√£o da compra'].mean().reset_index()
media_avaliacao_lojas.columns = ['Loja', 'M√©dia de Avalia√ß√£o']

plt.figure(figsize=(10, 6))


plt.plot(
    media_avaliacao_lojas['Loja'],
    media_avaliacao_lojas['M√©dia de Avalia√ß√£o'],
    marker='o',
    linewidth=2,
    color='teal'
)


plt.title('M√©dia de Avalia√ß√£o por Loja', fontsize=16)
plt.ylim(0, 5)
plt.ylabel('M√©dia de Avalia√ß√£o (0 a 5)', fontsize=12)
plt.xlabel('Loja', fontsize=12)


for index, row in media_avaliacao_lojas.iterrows():
    plt.text(index, row['M√©dia de Avalia√ß√£o'] + 0.05,
             f"{row['M√©dia de Avalia√ß√£o']:.2f}",
             ha='center', fontsize=10)


plt.tight_layout()
plt.show()

"""# 4. Produtos Mais e Menos Vendidos"""

vendas_produto = lojas_combinadas['Produto'].value_counts().reset_index()
vendas_produto.columns = ['Produto', 'Quantidade de Vendas']

mais_vendidos = vendas_produto.head(10)  # Top 10

mais_vendidos.sort_values(by='Quantidade de Vendas', ascending=False)

menos_vendidos = vendas_produto.tail(10)  # 10 menos vendidos

menos_vendidos.sort_values(by='Quantidade de Vendas')

df_mais_vendidos = mais_vendidos.sort_values('Quantidade de Vendas')


plt.figure(figsize=(10, 6))

plt.barh(
    df_mais_vendidos['Produto'],
    df_mais_vendidos['Quantidade de Vendas'],
    color='skyblue'
)

plt.title('Top 10 Produtos Mais Vendidos', fontsize=16)
plt.xlabel('Quantidade de Vendas', fontsize=12)
plt.ylabel('Produto', fontsize=12)

for index, value in enumerate(df_mais_vendidos['Quantidade de Vendas']):
    plt.text(value + 0.5, index, str(value), va='center', fontsize=10)

plt.tight_layout()
plt.show()

df_menos_vendidos = menos_vendidos.sort_values('Quantidade de Vendas')


plt.figure(figsize=(12, 6))

plt.barh(
    df_menos_vendidos['Produto'],
    df_menos_vendidos['Quantidade de Vendas'],
    color='teal'
)


plt.title('Top 10 Produtos Menos Vendidos', fontsize=16)
plt.xlabel('Quantidade de Vendas', fontsize=12)
plt.ylabel('Produto', fontsize=12)


for index, value in enumerate(df_menos_vendidos['Quantidade de Vendas']):
    plt.text(value + 0.5, index, str(value), va='center', fontsize=10)

plt.tight_layout()
plt.show()

"""# 5. Frete M√©dio por Loja

"""

frete_medio_por_loja = lojas_combinadas.groupby('Loja')['Frete'].mean().reset_index()
frete_medio_por_loja.columns = ['Loja', 'Frete M√©dio']

plt.figure(figsize=(10, 6))


plt.bar(
    frete_medio_por_loja['Loja'],
    frete_medio_por_loja['Frete M√©dio'],
    color='teal'
)


plt.title('Frete M√©dio por Loja', fontsize=16)
plt.xlabel('Loja', fontsize=12)
plt.ylabel('Valor M√©dio do Frete (R$)', fontsize=12)

for index, row in frete_medio_por_loja.iterrows():
    plt.text(
        index,
        row['Frete M√©dio'] + 1,
        f"R$ {row['Frete M√©dio']:.2f}",
        ha='center',
        fontsize=10
    )

plt.tight_layout()
plt.show()

"""##6. Extra An√°lise de Desempenho Geogr√°fico

"""

entregas_distancia = lojas_combinadas[['Pre√ßo', 'Local da compra', 'Produto', 'Vendedor', 'Frete', 'lat', 'lon']]

from geopy.distance import geodesic

lat_media = entregas_distancia['lat'].mean()
lon_media = entregas_distancia['lon'].mean()
ponto_referencia = (lat_media, lon_media)

entregas_distancia['Distancia_km'] = entregas_distancia.apply(
    lambda row: geodesic((row['lat'], row['lon']), ponto_referencia).km,
    axis=1
)

print(entregas_distancia)

entregas_distancia = lojas_combinadas[['Produto','Pre√ßo', 'Frete', 'lat', 'lon']].copy()


lat_media = entregas_distancia['lat'].mean()
lon_media = entregas_distancia['lon'].mean()
ponto_referencia = (lat_media, lon_media)

print(f"Ponto de refer√™ncia: lat {lat_media:.4f}, lon {lon_media:.4f}")


entregas_distancia['Distancia_km'] = entregas_distancia.apply(
    lambda row: geodesic((row['lat'], row['lon']), ponto_referencia).km,
    axis=1
)

print(entregas_distancia)

import folium
from folium.plugins import HeatMap, MarkerCluster


entregas_distancia = pd.DataFrame(entregas_distancia)

entregas_distancia['Produto'] = entregas_distancia['Pre√ßo'] + entregas_distancia['Frete']

lat_media = entregas_distancia['lat'].mean()
lon_media = entregas_distancia['lon'].mean()
ponto_ref = (lat_media, lon_media)


entregas_distancia['Distancia_km'] = entregas_distancia.apply(
    lambda row: geodesic((row['lat'], row['lon']), ponto_ref).km,
    axis=1
)


m = folium.Map(location=[lat_media, lon_media], zoom_start=5)


folium.Marker(
    location=[lat_media, lon_media],
    popup="Ponto M√©dio",
    icon=folium.Icon(color='red', icon='home')
).add_to(m)


heat_data = [[row['lat'], row['lon'], row['Produto']] for index, row in entregas_distancia.iterrows()]
HeatMap(heat_data, radius=25, blur=15, max_zoom=10).add_to(m)


marker_cluster = MarkerCluster().add_to(m)

for _, row in entregas_distancia.iterrows():
    folium.CircleMarker(
        location=[row['lat'], row['lon']],
        radius=row['Produto'] / 100,
        popup=(
            f"Produto: {row['Produto']}<br>"
            f"Valor: R${row['Pre√ßo']:.2f}<br>"
            f"Dist√¢ncia: {row['Distancia_km']:.2f} km"
        ),
        color='blue',
        fill=True,
        fill_opacity=0.7
    ).add_to(marker_cluster)

m

loja_coords = (lat_media, lon_media)

entregas_distancia['Distancia_km'] = entregas_distancia.apply(lambda row: geodesic((row['lat'], row['lon']), loja_coords).km, axis=1)

print(entregas_distancia[['Produto', 'Pre√ßo', 'Distancia_km']])

df_junto = pd.concat([entregas_distancia, lojas_combinadas], ignore_index=True)
print(df_junto)

loja_coords = (lat_media, lon_media)

entregas_distancia['Distancia_km'] = entregas_distancia.apply(
    lambda row: geodesic((row['lat'], row['lon']), loja_coords).km,
    axis=1
)

print(entregas_distancia[['Produto', 'Pre√ßo', 'Distancia_km']])

import seaborn as sns

plt.figure(figsize=(10, 6))
sns.regplot(
    data=entregas_distancia,
    x='Distancia_km',
    y='Pre√ßo',
    scatter_kws={'alpha':0.5},
    line_kws={'color':'red'}
)
plt.title('Regress√£o: Dist√¢ncia x Pre√ßo')
plt.xlabel('Dist√¢ncia (km)')
plt.ylabel('Pre√ßo (R$)')
plt.show()

import plotly.express as px

fig = px.scatter(
    entregas_distancia,
    x='Distancia_km',
    y='Pre√ßo',
    color='Produto',
    hover_data=['Produto', 'Pre√ßo', 'Distancia_km'],
    size='Pre√ßo',
    title='Rela√ß√£o entre Dist√¢ncia e Pre√ßo'
)
fig.show()

corr = entregas_distancia['Distancia_km'].corr(entregas_distancia['Pre√ßo'])
print(f'Correla√ß√£o Dist√¢ncia x Pre√ßo: {corr:.2f}')

"""##7. Relat√≥rio

## üìâ Por que vender a loja com menor faturamento?

A an√°lise de desempenho da nossa **Alura Store E-commerce** em 2023 mostrou que a **Loja 4**, por exemplo, apresentou o menor faturamento entre todas as unidades avaliadas.


Essa diferen√ßa expressiva levanta alguns pontos importantes para a tomada de decis√£o estrat√©gica:

---

### 1Ô∏è‚É£ Baixa rentabilidade

Apesar de registrar vendas, a **Loja 4 representa apenas 23,57% do faturamento total**, enquanto seus custos fixos (aluguel, equipe, fretes, estoque) permanecem proporcionalmente altos. Isso reduz drasticamente a margem de lucro.
Embora tenha boa m√©dia de avaliac√£o.

---

### 2Ô∏è‚É£ Custo de oportunidade

Recursos destinados a manter a Loja 4 poderiam ser **realocados** para investir nas unidades com maior desempenho. Isso significa:
- Aumentar o mix de produtos das lojas mais rent√°veis.
- Melhorar log√≠stica, marketing digital ou a√ß√µes de reten√ß√£o de clientes.
- Potencializar a expans√£o em regi√µes mais estrat√©gicas.

---

### 3Ô∏è‚É£ Foco na estrat√©gia de crescimento

Manter opera√ß√µes deficit√°rias compromete o desempenho global do neg√≥cio. Concentrar esfor√ßos em lojas que sustentam o crescimento garante:
- Melhor aproveitamento de equipe e recursos.
- Redu√ß√£o de custos operacionais.
- Melhoria de indicadores globais como ticket m√©dio e lucratividade.

---

### 4Ô∏è‚É£ Melhoria dos indicadores gerais

Vender ou encerrar a loja com menor faturamento pode resultar em:
- Aumento do **faturamento m√©dio por loja**.
- Melhor **avalia√ß√£o do cliente**, j√° que os recursos poder√£o ser usados para elevar o padr√£o de atendimento e entrega nas lojas restantes.

---

## ‚úÖ Conclus√£o

**Com base nos dados, manter uma loja que vende pouco pode custar mais do que retornar.**  
A recomenda√ß√£o √© avaliar uma eventual **venda, fus√£o ou encerramento** das opera√ß√µes dessa unidade, visando concentrar esfor√ßos em **√°reas com maior potencial de retorno**.
"""